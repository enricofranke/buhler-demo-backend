# Multi-stage Dockerfile fÃ¼r NestJS Backend
# Stage 1: Dependencies
FROM node:20-alpine AS deps
WORKDIR /app

# Copy all package files for the monorepo
COPY package*.json ./
COPY nx.json ./
COPY tsconfig*.json ./

# Install ALL dependencies (we need dev deps for building)
RUN npm ci

# Stage 2: Build
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma Client
RUN npx prisma generate

# Build the application
RUN npx nx build buhler-demo-backend --configuration=production

# Stage 3: Production  
FROM node:20-alpine AS runner
WORKDIR /app

# Create user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy necessary files
COPY --from=builder /app/dist/apps/buhler-demo-backend ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/package*.json ./

# Set environment
ENV NODE_ENV=production
ENV PORT=8080

# Switch to non-root user
USER nodejs

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Start the application
CMD ["node", "dist/main.js"]