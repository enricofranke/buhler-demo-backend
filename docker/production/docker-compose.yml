name: explore_dg_prod

services:
  postgres:
    image: postgres:17-alpine
    container_name: explore-dg-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-explore_dg_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres-backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - explore-dg-prod-network

  # TODO: Add application service for production
  # app:
  #   build:
  #     context: ../../
  #     dockerfile: Dockerfile.prod
  #   container_name: explore-dg-app-prod
  #   ports:
  #     - "${APP_PORT:-3000}:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-explore_dg_prod}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - explore-dg-prod-network

  # TODO: Add reverse proxy (nginx) for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: explore-dg-nginx-prod
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - app
  #   restart: unless-stopped
  #   networks:
  #     - explore-dg-prod-network

volumes:
  postgres_prod_data:

networks:
  explore-dg-prod-network:
    driver: bridge 