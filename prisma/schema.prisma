// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  displayName       String?  @map("display_name")
  
  // Authentication fields
  microsoftId       String?  @unique @map("microsoft_id")
  userPrincipalName String?  @map("user_principal_name")
  
  // Status
  isActive          Boolean  @default(true) @map("is_active")
  
  // Microsoft Graph data (for reference, mapping happens in code)
  microsoftGroups   String[] @map("microsoft_groups")
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  lastLoginAt       DateTime? @map("last_login_at")

  // Relations - Many-to-Many with Roles
  userRoles         UserRole[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // ADMIN, USER, SALES, MODERATOR, etc.
  displayName String   @map("display_name") // "Administrator", "Sales Representative", etc.
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  isSystem    Boolean  @default(false) @map("is_system") // System roles can't be deleted
  
  // Optional: Permissions (JSON field for flexible permissions)
  permissions Json?
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles   UserRole[]

  @@map("roles")
}

// Junction table for User-Role Many-to-Many
model UserRole {
  id        String   @id @default(cuid())
  
  // Foreign Keys
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  
  // Role assignment metadata
  assignedBy String?  @map("assigned_by") // Who assigned this role (SYSTEM, admin user ID, etc.)
  assignedAt DateTime @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at") // Optional role expiration
  isActive   Boolean  @default(true) @map("is_active")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}
